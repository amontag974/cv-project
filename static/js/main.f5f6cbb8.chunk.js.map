{"version":3,"sources":["components/DisplayedData.js","components/DetailInput.js","components/SubmissionForm.js","App.js","index.js"],"names":["DisplayedData","props","title","information","data","fields","map","field","index","key","className","createLabel","value","type","onClick","undoSubmit","id","sectionID","DetailInput","label","detailKey","onChange","handleChange","required","SubmissionForm","inputs","onSubmit","App","useState","generalInfo","submitted","firstName","lastName","email","phoneNumber","education","schoolName","titleEarned","schoolStartDate","schoolEndDate","experience","companyName","jobTitle","jobDescription","positionStartDate","positionEndDate","setData","e","targetField","target","targetSection","getTargetSection","targetObject","Object","assign","tempData","sections","keys","sectIndex","length","hasOwnProperty","handleSubmit","preventDefault","slice","replace","charAt","toUpperCase","getFields","filter","undefined","section","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5f6cbb8.chunk.js","sourcesContent":["import React from 'react'\n\nfunction DisplayedData(props) {\n  const { title } = props.information;\n  const fields = props.fields;\n\n  let data = fields.map( (field, index) => {\n    return <p key={index}><span className=\"display-label\">{props.createLabel(field)}:</span> {props.information[field].value}</p>\n  });\n\n  return (\n    <div className=\"displayed-data\">\n      <h1>{title}</h1>\n      {data}\n      <button type=\"button\" onClick={props.undoSubmit} id={`btn-edit-${props.information.sectionID}`}>Edit</button>\n    </div>\n  );\n}\n\nexport default DisplayedData;","import React from 'react';\n\nfunction DetailInput(props) {\n\n  return (\n    <div className=\"field-container\">\n      <label>{props.label} </label>\n      <input id={props.detailKey} type={props.type} onChange={props.handleChange} value={props.value} required></input>\n    </div>\n  )\n}\n\nexport default DetailInput;","import React from 'react'\nimport DetailInput from './DetailInput';\n\n\nfunction SubmissionForm(props) {\n  const { title, sectionID } = props.information;\n  const fields = props.fields;\n  let inputs = fields.map( (field, index) => {\n    return (\n      <DetailInput \n        key={index}\n        label={props.createLabel(field)}\n        detailKey={field}\n        type={props.information[field].type}\n        value={props.information[field].value}\n        handleChange={props.onChange}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <form onSubmit={props.onSubmit} id={`form-${sectionID}`}>\n        <fieldset>\n          <legend>{title}</legend>\n            {inputs}\n          <button type=\"submit\">Submit</button>\n        </fieldset>\n      </form>\n    </div>\n  )\n}\n\nexport default SubmissionForm;","import React, { useState } from 'react';\nimport './App.css';\nimport DisplayedData from './components/DisplayedData';\nimport SubmissionForm from './components/SubmissionForm';\n\nfunction App() {\n  let initialData = {\n    generalInfo: {\n      title: \"General Information\",\n      sectionID: \"generalInfo\", \n      submitted: false,\n      firstName: {\n        value: \"\",\n        type: \"text\"\n      },\n      lastName: {\n        value: \"\",\n        type: \"text\"\n      },\n      email: {\n        value: \"\",\n        type: \"email\"\n      },\n      phoneNumber: {\n        value: \"\",\n        type: \"tel\"\n      }\n    },\n    education: {\n      title: \"Education\",\n      sectionID: \"education\", \n      submitted: false,\n      schoolName: {\n        value: \"\",\n        type: \"text\"\n      },\n      titleEarned: {\n        value: \"\",\n        type: \"text\"\n      },\n      schoolStartDate: {\n        value: \"\",\n        type: \"date\"\n      },\n      schoolEndDate: {\n        value: \"\",\n        type: \"date\"\n      }\n    },\n    experience: {\n      title: \"Work Experience\",\n      sectionID: \"experience\",\n      submitted: false,\n      companyName:  {\n        value: \"\",\n        type: \"text\"\n      },\n      jobTitle:  {\n        value: \"\",\n        type: \"text\"\n      },\n      jobDescription:  {\n        value: \"\",\n        type: \"text\"\n      },\n      positionStartDate:  {\n        value: \"\",\n        type: \"date\"\n      },\n      positionEndDate:  {\n        value: \"\",\n        type: \"date\"\n      }\n    }\n  }\n\n  const [data, setData] = useState(initialData);\n\n  const handleChange = e => {\n    const targetField = e.target.id;\n    const targetSection = getTargetSection(targetField);\n    const targetObject = Object.assign({}, data[targetSection]);\n    targetObject[targetField].value = e.target.value;\n\n    let tempData = Object.assign({}, data);\n    tempData[targetSection] = targetObject;\n    setData(tempData);\n  }\n\n  const getTargetSection = targetField => {\n    const sections = Object.keys(data);\n\n    for (let sectIndex = 0; sectIndex < sections.length; sectIndex++) {\n      if ( data[sections[sectIndex]].hasOwnProperty(targetField) ) {\n        return sections[sectIndex];\n      }\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let buttonId = e.target.id\n    let targetSection = buttonId.slice(5);\n\n    const targetObject = Object.assign({}, data[targetSection]);\n    targetObject.submitted = true;\n\n    let tempData = Object.assign({}, data);\n    tempData[targetSection] = targetObject;\n    setData(tempData);\n  }\n\n  const undoSubmit = e => {\n    let buttonId = e.target.id\n    let targetSection = buttonId.slice(9);\n\n    const targetObject = Object.assign({}, data[targetSection]);\n    targetObject.submitted = false;\n\n    let tempData = Object.assign({}, data);\n    tempData[targetSection] = targetObject;\n    setData(tempData);\n  }\n\n  const createLabel = key => {\n    let label = key\n      .replace(/([a-z])([A-Z])/g, \"$1 $2\")\n      .replace(/([A-Z])([A-Z])/g, \"$1 $2\");\n\n    label = label.charAt(0).toUpperCase() + label.slice(1);\n\n    return label;\n  }\n\n  const getFields = information => {\n    let keys = Object.keys(information);\n    let fields = keys.filter( key => {\n      return information[key].value !== undefined;\n    });\n  \n    return fields;\n  }\n\n  const sections = Object.keys(data);\n\n  //render submission form for each section where submitted equals false\n  //render displayed data for each section where submitted equals true\n  let page = sections.map( (section, index) => {\n    if (data[section].submitted) {\n      return (\n        <>\n          <DisplayedData \n            key={index}\n            createLabel={createLabel}\n            fields={getFields(data[section])}\n            information={data[section]}\n            undoSubmit={undoSubmit}            \n          />\n        </>\n      )\n    }\n    return (\n      <>\n        <SubmissionForm\n          key={index}\n          createLabel={createLabel}\n          fields={getFields(data[section])}\n          information={data[section]}\n          onChange={handleChange}\n          onSubmit={handleSubmit}\n        />\n      </>\n    )\n  });\n\n  return page;  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}